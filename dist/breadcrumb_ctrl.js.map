{"version":3,"sources":["../src/breadcrumb_ctrl.js"],"names":["_","PanelCtrl","impressions","BreadcrumbCtrl","$scope","$injector","$location","backendSrv","navigate","bind","dashboardList","windowLocation","sessionStorage","getItem","setItem","JSON","parse","updateText","dashIds","getDashboardOpened","search","dashboardIds","limit","panel","then","result","uri","window","location","pathname","split","pop","obj","find","findIndex","url","push","name","title","stringify","index","length","splice","path","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEOA,a;;AACEC,qB,kBAAAA,S;;AACAC,uB,yCAAAA,W;;;;;;;;;;;;;;;;;;;;;2DAEHC,c;;;AACF;;;;;;;AAOA,wCAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,SAA/B,EAA0CC,UAA1C,EAAsD;AAAA;;AAAA,gJAC5CH,MAD4C,EACpCC,SADoC;;AAElD;AACAD,2BAAOI,QAAP,GAAkB,MAAKA,QAAL,CAAcC,IAAd,OAAlB;AACA,0BAAKF,UAAL,GAAkBA,UAAlB;AACA,0BAAKG,aAAL,GAAqB,EAArB;AACA,0BAAKC,cAAL,GAAsBL,SAAtB;AACA;AACA,wBAAI,CAACM,eAAeC,OAAf,CAAuB,UAAvB,CAAL,EAAyC;AACrCD,uCAAeE,OAAf,CAAuB,UAAvB,EAAmC,IAAnC;AACH,qBAFD,MAGK;AACD,8BAAKJ,aAAL,GAAqBK,KAAKC,KAAL,CAAWJ,eAAeC,OAAf,CAAuB,UAAvB,CAAX,CAArB;AACH;AACD,0BAAKI,UAAL;AAdkD;AAerD;AACD;;;;;;;iDAGa;AAAA;;AACT,4BAAIC,UAAUhB,YAAYiB,kBAAZ,EAAd;AACA;AACA,6BAAKZ,UAAL,CAAgBa,MAAhB,CAAuB,EAAEC,cAAcH,OAAhB,EAAyBI,OAAO,KAAKC,KAAL,CAAWD,KAA3C,EAAvB,EAA2EE,IAA3E,CAAgF,UAACC,MAAD,EAAY;AACxF,gCAAIC,MAAM,QAAQC,OAAOC,QAAP,CAAgBC,QAAhB,CAAyBC,KAAzB,CAA+B,GAA/B,EAAoCC,GAApC,EAAlB;AACA,gCAAIC,MAAMhC,EAAEiC,IAAF,CAAOR,MAAP,EAAe,EAAEC,KAAKA,GAAP,EAAf,CAAV;AACA;AACA,gCAAI1B,EAAEkC,SAAF,CAAY,OAAKxB,aAAjB,EAAgC,EAAEyB,KAAK,eAAeT,GAAtB,EAAhC,IAA+D,CAAnE,EAAsE;AAClE,uCAAKhB,aAAL,CAAmB0B,IAAnB,CAAwB,EAAED,KAAK,eAAeT,GAAtB,EAA2BW,MAAML,IAAIM,KAArC,EAAxB;AACH;AACD;AACA1B,2CAAeE,OAAf,CAAuB,UAAvB,EAAmCC,KAAKwB,SAAL,CAAe,OAAK7B,aAApB,CAAnC;AACH,yBATD;AAUH;;;6CAKQyB,G,EAAK;AACV;AACA;AACA,4BAAMK,QAAQxC,EAAEkC,SAAF,CAAY,KAAKxB,aAAjB,EAAgC,EAAEyB,KAAKA,GAAP,EAAhC,CAAd;AACA,4BAAIK,QAAQ,CAAC,CAAT,IAAc,KAAK9B,aAAL,CAAmB+B,MAAnB,IAA6BD,QAAQ,CAAvD,EAA0D;AACtD,iCAAK9B,aAAL,CAAmBgC,MAAnB,CAA0BF,QAAQ,CAAlC,EAAqC,KAAK9B,aAAL,CAAmB+B,MAAnB,GAA4BD,KAA5B,GAAoC,CAAzE;AACA5B,2CAAeE,OAAf,CAAuB,UAAvB,EAAmCC,KAAKwB,SAAL,CAAe,KAAK7B,aAApB,CAAnC;AACH;AACD,6BAAKC,cAAL,CAAoBgC,IAApB,CAAyBR,GAAzB;AACH;;;;cAtDwBlC,S;;AAwD7BE,2BAAeyC,WAAf,GAA6B,aAA7B;;sCACSzC,c;;iCAAgBA,c","file":"breadcrumb_ctrl.js","sourcesContent":["/// <reference path=\"../typings/common.d.ts\" />\r\n/// <reference path=\"../typings/index.d.ts\" />\r\nimport _ from \"lodash\";\r\nimport { PanelCtrl } from \"app/plugins/sdk\";\r\nimport { impressions } from \"app/features/dashboard/impression_store\";\r\nimport \"./breadcrumb.css!\";\r\nclass BreadcrumbCtrl extends PanelCtrl {\r\n    /**\r\n     * Breadcrumb class constructor\r\n     * @param {IBreadcrumbScope} $scope Angular scope\r\n     * @param {ng.auto.IInjectorService} $injector Angluar injector service\r\n     * @param {ng.ILocationService} $location Angular location service\r\n     * @param {any} backendSrv Grafana backend callback\r\n     */\r\n    constructor($scope, $injector, $location, backendSrv) {\r\n        super($scope, $injector);\r\n        // Init variables\r\n        $scope.navigate = this.navigate.bind(this);\r\n        this.backendSrv = backendSrv;\r\n        this.dashboardList = [];\r\n        this.windowLocation = $location;\r\n        // Check for browser session storage and create one if it doesn't exist\r\n        if (!sessionStorage.getItem(\"dashlist\")) {\r\n            sessionStorage.setItem(\"dashlist\", \"[]\");\r\n        }\r\n        else {\r\n            this.dashboardList = JSON.parse(sessionStorage.getItem(\"dashlist\"));\r\n        }\r\n        this.updateText();\r\n    }\r\n    /**\r\n     * Update Breadcrumb items\r\n     */\r\n    updateText() {\r\n        var dashIds = impressions.getDashboardOpened();\r\n        // Fetch list of all dashboards from Grafana\r\n        this.backendSrv.search({ dashboardIds: dashIds, limit: this.panel.limit }).then((result) => {\r\n            var uri = \"db/\" + window.location.pathname.split(\"/\").pop();\r\n            var obj = _.find(result, { uri: uri });\r\n            // Add current dashboard to breadcrumb if it doesn't exist\r\n            if (_.findIndex(this.dashboardList, { url: \"dashboard/\" + uri }) < 0) {\r\n                this.dashboardList.push({ url: \"dashboard/\" + uri, name: obj.title });\r\n            }\r\n            // Update session storage\r\n            sessionStorage.setItem(\"dashlist\", JSON.stringify(this.dashboardList));\r\n        });\r\n    }\r\n    /**\r\n     * Navigate to given dashboard\r\n     * @param {string} url\r\n     */\r\n    navigate(url) {\r\n        // Check if user is navigating backwards in breadcrumb and\r\n        // remove all items that follow the selected item in that case\r\n        const index = _.findIndex(this.dashboardList, { url: url });\r\n        if (index > -1 && this.dashboardList.length >= index + 2) {\r\n            this.dashboardList.splice(index + 1, this.dashboardList.length - index - 1);\r\n            sessionStorage.setItem(\"dashlist\", JSON.stringify(this.dashboardList));\r\n        }\r\n        this.windowLocation.path(url);\r\n    }\r\n}\r\nBreadcrumbCtrl.templateUrl = \"module.html\";\r\nexport { BreadcrumbCtrl, BreadcrumbCtrl as PanelCtrl };\r\n//# sourceMappingURL=breadcrumb_ctrl.js.map"]}